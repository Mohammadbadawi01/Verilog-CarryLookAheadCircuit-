
module FA(A,B,S,cin,cout);  
  input A,B;  
  input cin;  
  output cout;
  output S;
  assign {cout, S} = A + B +cin ;  
endmodule 

module U(A,B,sum,sel,overFlow,cout);
  input [3:0]A,B;
  output [3:0]sum;
  input sel;
  output cout;
  output overFlow;
  wire [3:0]x;
  wire c1,c2,c3;  
  reg [2:0]P,G;
  wire dum0,dum1;
  xor w1(x[0],B[0],sel);
  xor w2(x[1],B[1],sel);
  xor w3(x[2],B[2],sel);
  xor w4(x[3],B[3],sel);
  
  assign P[0] = (A[0]^B[0]);
  assign P[1] = (A[1]^B[1]);
  assign P[2] = (A[2]^B[2]);
  assign G[0] = (A[0]&B[0]);
  assign G[1] = (A[1]&B[1]);
  assign G[2] = (A[2]&B[2]);
  
  CarryLookAheadCircuit clac(P,G,c2,c3,sel);
  FA f0(x[0],A[0],sum[0],sel,c1);
  FA f1(x[1],A[1],sum[1],c1,dum0);
  FA f2(x[2],A[2],sum[2],c2,dum1);
  FA f3(x[3],A[3],sum[3],c3,cout);
  xor xn0(overFlow,c3,cout);
endmodule
module CarryLookAheadCircuit(P,G,c2,c3,cin);
  input [2:0]P,G;
  output c2,c3;
  input cin;
  assign c2 = G[1] | (P[1]&G[0]) | (P[1]&P[0]&cin);
  assign c3 = G[2] | (P[2]&G[1]) | (P[2]&P[1]&G[0]) | (P[2]&P[1]&P[0]&cin);
endmodule